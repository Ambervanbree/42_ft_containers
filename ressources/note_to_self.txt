Recente problemen:
* 	Je kunt een pair met een const key niet swappen, omdat een const niet assignable is.
	Ik heb een functie swap_links gemaakt, maar weet niet of die perfect werkt. 
	Nieuw idee: een stuctuur met de content. Plus een structuur met alle pointers,
	waaronder een pointer naar de content. Zo kan alles geswapt worden zonder =.
*	Nog een ding: de functie om te assignen zonder dummy werkte niet, maar omdat ik
	een node_ptr doorgaf ipv een node_ref. Deze even herschrijven en goed testen.
	Game plan: deze functie testen. Een functie met de nieuwe structuur testen
	en als het werkt, implementeren.
*	Delete voor deze variatie swapte wel de content (maar dus niet met first...), en 
	daarom had ik een return iterator naar de gedeletete node. Die heb ik recent weggehaald,
	dus dat zou nog problemen kunnen opleveren.
*	Ik heb een dummy node gemaakt met _links-> het eerste element en _rechts->
	het laatste element. Het laatste element wijst ernaar en het eerste element.
	En met de iterators heb ik ervoor gezorgd dat het juiste wordt gereturnd.
*	Ik had defines gemaakt voor LEFT_NON_NIL LEFT_NIL etc, maar toen had ik ze per ongeluk
	allemaal naar _left laten wijzen. Zelfde met dingen in delete met _left en _right.
	Ik hoop het niet, maar er kunnen nog zulke foutjes in zitten.
*	Als we een max of min value weghalen moet de dummy wel weer naar het juiste element
	wijzen. Daarom heb ik een functie update_dummy geschreven. Die ook werkt voor insert,
	als er een nieuw element tussen max/min en dummy in komt.

Te doen:
*	Argumenten update_dummy aanpassen (want parent klopt eigenlijk niet).
*	De overgebleven map-functies uiteraard.
*	Een beetje een soort van norm aanhouden.
*	Node en tree in een aparte hpp.
